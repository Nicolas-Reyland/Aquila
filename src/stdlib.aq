/** Aquila Standard Library **/

#name Standard Lib (std lib)
#setting (auto trace) false

/** Constants **/
global decl int $MATH_NUM_ITER = 15
global const decl float $PI = 3.141592653589793
global const decl float $HALF_PI = 1.570796326794896
global const decl float $TWO_PI = 6.283185307179586
global const decl float $EXP = 2.718281828459045

/** Mathematical Functions **/
// square
function auto square(x)
  return($x * $x)
end-function

// power
function recursive auto pow(_x, _n)
  decl auto $x = $_x
  decl int $n = $_n
  // Invalid Math domain
  if ($n < 0)
    raise_error() // raise_error
  end-if
  if ($n ~ 0)
    return(1)
  end-if
  if ($n ~ 1)
    return($x)
  end-if
  if ($n % 2 ~ 0)
    return(pow(square($x), $n / 2))
  else
    return(pow(square($x), $n / 2) * $x)
  end-if
end-function

// float modulo
function float fmod(_x, _y)
  decl float $x = $_x
  decl bool $neg = false
  if ($x < 0)
    $x *= -1
    $neg = true
  end-if
  if ($_y < 0)
    $_y *= -1
    $neg = !($neg)
  end-if
  while ($x > $_y)
    $x -= $_y
  end-while
  if ($neg)
    $x *= -1
  end-if
  return($x)
end-function

// exp
function float exp(_x)
  decl float $x = $_x
  decl float $r = 1f
  decl int $div = 1
  // skip one iteration (caught in the return call)
  for (decl int $i = 1; $i < $MATH_NUM_ITER; $i ++)
    $r += $x / int2float($div)
    $x *= $_x
    $div *= $i + 1
  end-for
  return($r + $x / int2float($div))
end-function

// natural log
function float ln(_x)
  decl float $x = ($_x - 1)
  // Invalid Math domain
  if ($x < 0)
    raise_error() // raise_error
  end-if
  decl float $r = $x
  decl float $sign = 1f
  for ($i = 0; $i < $MATH_NUM_ITER; $i ++)
    $x *= $_x
    $sign *= -1
    $r += $sign * ($x / int2float($i + 2))
  end-for
  return($x)
end-function

// sin
function float sin(_x)
  decl float $x = $_x
  decl float $r = $_x
  decl float $sign = 1f
  decl int $div = 1
  decl int $counter = 2
  for (decl int $i = 0; $i < $MATH_NUM_ITER; $i ++)
    $x *= $_x * $_x
    $div *= $counter * ($counter + 1)
    $counter += 2
    $sign *= -1f
    $r += $sign * ($x / int2float($div))
  end-for
  return($r)
end-function

// cos
function float cos(_x)
  return(sin($_x + $HALF_PI))
end-function

// tan
function float tan(_x)
  return(sin($_x) / cos($_x))
end-function

// csc
function float csc(_x)
  return(1f / sin($_x))
end-function

// sec
function float sec(_x)
  return(1f / cos($_x))
end-function

// cot
function float cot(_x)
  return(1f / tan($_x))
end-function

// euclidean_distance
function float euclid_dist(u, v)
  return(sqrt(square($u[0] + $v[0]) + square($u[1] + $v[1])))
end-function

// angle
function float angle(u, v)
  return(arccos(($u[0] * $v[0] + $u[1] * $v[1]) / (sqrt( square($u[0]) + square($u[1]) ) * sqrt( square($v[0]) + square($v[1]) ))))
end-function


/** List utilities **/
// index
function int index_of(l, value)
  decl int $len = length($l)
  for ($i = 0; $i < $len; $i ++)
    if ($l[$i] ~ $value)
      return $i
    end-if
  end-for
  return -1
end-function

// delete element
function auto delete_value(l, value)
  decl int $index = index_of($l, $value)
  if ($index < 0)
    return
  end-if
  delete_value_at($l, $index)
end-function

// sum of the elements in a one-dimensional list
function list sum(l)
  decl int $len = length($l)
  if ($len ~ 0)
    raise_error()
  end-if
  decl auto $total = $l[0]
  for (decl int $i = 1; $i < $len; $i ++)
    $total += $l[$i]
  end-for
  return($total)
end-function

// mean of a list
function float mean(l)
  return(sum($l) / int2float(length($l)))
end-function

// range
function list range(start, stop, step)
	decl list $l = []
	for (decl $i = $start; $i < $stop; $i += $step)
		append_value($l, $i)
	end-for
	return($l)
end-function

// slice a list
function list slice_list(l, start, stop, step)
	decl list $spliced_list = []
	for ($i = $start; $i < $stop; $i += $step)
		append_value($spliced_list, list_at($l, $i))
	end-for
	return($spliced_list)
end-function

// fill a list
function list fill_list(n, value)
  decl list $l = []
  for (decl int $i = 0; $i < $n; $i ++)
    appen_value($l, $value)
  end-for
  return($l)
end-function








//
