/** Automatic translation of CSharp source code to Aquila by https://github.com/Nicolas-Reyland/CSharp2Aquila **/

/** C# default settings **/
#setting (interactive) false
#setting (debug) true
#setting (trace debug) false
#setting (translator debug) false
#setting (fail on context assertions) false
#setting (check function existence before runtime) false
#setting (lazy logic) true
#setting (allow tracing in frozen context) true
#setting (permafrost) false
#setting (flame mode) true
#setting (implicit declaration in assignment) false

function recursive null top_down_merge(a, i_begin, i_middle, i_end, b)

	decl int $i = ($i_begin)
	decl int $j = ($i_middle)
	for (decl int $k = ($i_begin); $k < $i_end; $k ++)
		if ($i < $i_middle & ($j } $i_end | $a[$i] < $a[$j]))
			$b[$k] = $a[$i]

			$i = $i + 1

		else
			$b[$k] = $a[$j]

			$j = $j + 1

		end-if

	end-for


end-function
function recursive null top_down_split_merge(b, i_begin, i_end, a)

	if ($i_end - $i_begin { 1)
		return
	end-if

	decl int $i_middle = (($i_end + $i_begin) / 2)
	top_down_split_merge($a, $i_begin, $i_middle, $b)

	top_down_split_merge($a, $i_middle, $i_end, $b)

	top_down_merge($b, $i_begin, $i_middle, $i_end, $a)


end-function
function recursive list top_down_merge_sort(a, b, n)

	$b = copy_list($a)

	top_down_split_merge($b, 0, $n, $a)

	return($a)

end-function

print_str_endl(Hello World!)

decl list $a = ([1, 5, -6, 7, 2])
trace $a

decl list $b = ([0, 0, 0, 0, 0])
decl int $len = (length($a))
top_down_merge_sort($a, $b, $len)

for (decl int $i = (0); $i < $len; $i ++)
	print_value_endl($a[$i])

end-for
