/** Proof that Aquila is a turing complete programming language by coding the "Rule 110 cellular automaton"
	Is pretty slow (because of the prints) tho ... **/

decl $total_gen = 100

// global vars
decl $l = [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1]
decl int $len
decl list $new_list
// for-loop incrementation
decl int $i
// rule 110 vars
decl int $start
decl int $middle
decl int $end
decl int $next_value

$len = length($l)
$new_list = copy_list($l)

//
for (decl $gen = 0; $gen < $total_gen; $gen ++)
	for ($i = 0; $i < $len; $i ++)
		// start
		if ($i ~ 0)
			$start = $l[$len - 1]
		else
			$start = $l[$i - 1]
		end-if
		// middle
		$middle = $l[$i]
		// end
		if ($i ~ $len - 1)
			$end = $l[0]
		else
			$end = $l[$i + 1]
		end-if

		// rule 110 cases
		if ($start ~ 1)
			if ($middle ~ 1)
				if ($end ~ 1)
					$next_value = 0
				else
					$next_value = 1
				end-if
			else
				if ($end ~ 1)
					$next_value = 1
				else
					$next_value = 0
				end-if
			end-if
		else
			if ($middle ~ 1)
				$next_value = 1
			else
				if ($end ~ 1)
					$next_value = 1
				else
					$next_value = 0
				end-if
			end-if
		end-if

		// apply
		$new_list[$i] = $next_value
	end-for

	// print it out
	print_value_endl($new_list)

	// new list, let's go !
	$l = copy_list($new_list)
end-for

return($l)
